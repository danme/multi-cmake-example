Copyright 2015 Daniel Menke

This file is part of cmake-tutorial.

cmake-tutorial is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

cmake-tutorial is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with cmake-tutorial.  If not, see <http://www.gnu.org/licenses/>.

MyStaticApp
======

This is the MyStaticApp package of the cmake tutorial for multi module setups.

The MyStaticApp package provides an executable that just prints some
Hello World strings.
This package is needs the UpstreamA library.

This project is configured with CMake.

[NOTE]
.Project Structure
----
The other packages of this tutorial are build as stand alone modules.
The developer has to take care of installing them thus the built modules
can be found. Usually by using a common PREFIX path for installation and
CMake configuration.

This project shows another way of using extern cmake projects.
Therefore we simply put the extern projects as subdirectories in our own
project dir and add them to our CMake configuration.
The subdirectories can also be git submodules or links.

This approach is useful, if you do not want to install the dependency
libraries on your system. You can create and link everything statically
or create your own bundle that brings is all files thus it can run
out of the box (common approach on Windows and in OS X bundles).

The name of the package and executables contain static because
in this tutorial I use the static linking.
----

Build
-----

Use your prefered way working with CMake.
Recommended out-of-source build.

Depending on your choice how the dependend libraries are build
(static or shared) the executable will be linked accordingly.

Install
-------

To install everything from this package build the target install.

This package contains a couple of install components:
* Runtime: group needed to use the executable at runtime
** MySApp: The executable.
* Development: group to find the executable at development time (headers, cmake-files, libraries).
** MyStaticAppDevel: Basic cmake-files to use this package (CONFIG)
** MySAppDevel: dev files for mysapp executable
** _The extern projects Development components_: dev files for usage of dependencies

[NOTE]
.Development
----
Since I use staic linking I configured CPack to include the Development
components of the dependencies as well. Thus the headers and static libraries
will get installed and can be used.
If you want to build this app with shared libraries make sure to add the
regarding components to the CPack configuration. Thus the shared libraries will
get installed.
----

You can install components at own risks (beware of dependencies) with

    cmake -DCOMPONENT=MyApp -P <path-to-base-build-dir>/cmake_install.cmake

Prefer to use CPack:

    cpack -G TGZ

produces two archives one for the Runtime Components and 
one for the Development components.
Install these tar files.

Or use a CPack Generator that is multi component aware like NSIS or PackageMaker
to select the desired components in a graphical insterface.
